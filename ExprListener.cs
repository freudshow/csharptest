//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExprParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IExprListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] ExprParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] ExprParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt([NotNull] ExprParser.StmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt([NotNull] ExprParser.StmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.assignStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignStmt([NotNull] ExprParser.AssignStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.assignStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignStmt([NotNull] ExprParser.AssignStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] ExprParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] ExprParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom([NotNull] ExprParser.AtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom([NotNull] ExprParser.AtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] ExprParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] ExprParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryOp([NotNull] ExprParser.UnaryOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryOp([NotNull] ExprParser.UnaryOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultOp([NotNull] ExprParser.MultOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultOp([NotNull] ExprParser.MultOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOp([NotNull] ExprParser.AddOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOp([NotNull] ExprParser.AddOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.shiftOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShiftOp([NotNull] ExprParser.ShiftOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.shiftOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShiftOp([NotNull] ExprParser.ShiftOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareOp([NotNull] ExprParser.CompareOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareOp([NotNull] ExprParser.CompareOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.equalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualOp([NotNull] ExprParser.EqualOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.equalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualOp([NotNull] ExprParser.EqualOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.bitAndOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitAndOp([NotNull] ExprParser.BitAndOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.bitAndOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitAndOp([NotNull] ExprParser.BitAndOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.bitXorOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitXorOp([NotNull] ExprParser.BitXorOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.bitXorOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitXorOp([NotNull] ExprParser.BitXorOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.bitOrOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitOrOp([NotNull] ExprParser.BitOrOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.bitOrOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitOrOp([NotNull] ExprParser.BitOrOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.logicAndOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicAndOp([NotNull] ExprParser.LogicAndOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.logicAndOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicAndOp([NotNull] ExprParser.LogicAndOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.logicOrOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicOrOp([NotNull] ExprParser.LogicOrOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.logicOrOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicOrOp([NotNull] ExprParser.LogicOrOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.funcName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncName([NotNull] ExprParser.FuncNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.funcName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncName([NotNull] ExprParser.FuncNameContext context);
}
